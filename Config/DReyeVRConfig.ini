# NOTE: this is a weird config file bc it is custom written for DReyeVR
# - use hashtags '#' for comments (supports inline)

# some serialization formats:
# FVector: (X=..., Y=..., Z=...) (along XYZ-axes)
# FRotator: (R=..., P=..., Y=...) (for roll, pitch, yaw)
# FTransform: (FVector | FRotator | FVector) = (X=..., Y=..., Z=... | R=..., P=..., Y=... | X=..., Y=..., Z=...)
# bool: True or False

[EgoVehicle]
VehicleType="TeslaM3" # this is the name of the .ini config file in Config/EgoVehicles/

# general parameters for all vehicles
SpeedometerInMPH=True       # set to False to use KPH
EnableTurnSignalAction=True # True to enable turn signal animation (& sound), else false
TurnSignalDuration=3.0      # time (in s) that the turn signals stay on for
DrawDebugEditor=False       # draw debug lines/sphere for eye gaze in the editor

[CameraParams]
FieldOfView=90.0       # horizontal field of view (only in stereo camera => NOT VR)
ScreenPercentage=100   # 100% is native resolution, increase for supersampling, decrease for subsampling
# all the intensities range from [0 (off) to 1 (maximum)]
MotionBlurIntensity=0  # how much motion blur in the camera
VignetteIntensity=0    # how intense the vignetting is (darkened corners)
BloomIntensity=0       # how intense the bloom is
SceneFringeIntensity=0 # how intense the SceneFringe is
LensFlareIntensity=0   # how intense the lens flares are
GrainIntensity=0       # how intense the grain is

[EgoSensor]
StreamSensorData=True    # Set to False to skip streaming sensor data (for PythonAPI) on every tick
MaxTraceLenM=1000.0      # maximum trace length (in meters) to use for world-hit point calculation
DrawDebugFocusTrace=True # draw the debug focus trace & hit point in editor

[VehicleInputs]
ScaleSteeringDamping=0.6
ScaleThrottleInput=1.0
ScaleBrakeInput=1.0
InvertMouseY=False
ScaleMouseY=1.0
ScaleMouseX=1.0

[EgoVehicleHUD]
HUDScaleVR=6               # scale all HUD elements in VR mode only
DrawFPSCounter=True        # draw's FPS (frames per second) in top right corner of flat screen
DrawFlatReticle=True       # reticle in flat-screen mode
DrawGaze=False             # draw debug gaze lines on flat-screen hud
DrawSpectatorReticle=True  # reticle in spectator mode during vr (VR spectator HUD only)
ReticleSize=100            # (percent) diameter of reticle (thickness also scales)
EnableSpectatorScreen=True # whether or not to enable the flat-screen spectator when in VR

[Game]
AutomaticallySpawnEgo=True       # use to spawn EgoVehicle, o/w defaults to spectator & Ego can be spawned via PythonAPI
DoSpawnEgoVehicleTransform=False # True uses the SpawnEgoVehicleTransform below, False uses Carla's own spawn points
SpawnEgoVehicleTransform=(X=3010, Y=390, Z=0.0 | R=0, P=0.0, Y=0 | X=1.0, Y=1.0, Z=1.0) # !! This is only for Town03 !!

[Sound]
DefaultEngineRev="SoundCue'/Game/DReyeVR/Sounds/EngineRev/EngineRev.EngineRev'"
DefaultCrashSound="SoundCue'/Game/DReyeVR/Sounds/Crash/CrashCue.CrashCue'"
DefaultGearShiftSound="SoundWave'/Game/DReyeVR/Sounds/GearShift.GearShift'"
DefaultTurnSignalSound="SoundWave'/Game/DReyeVR/Sounds/TurnSignal.TurnSignal'"
EgoVolumePercent=100
NonEgoVolumePercent=100
AmbientVolumePercent=20

[Replayer]
CameraFollowHMD=True    # Whether or not to have the camera pose follow the recorded HMD pose
UseCarlaSpectator=False # Use the built-in Carla spectator (not recommended) or spawn our own (recommended)

# Enable or disable replay interpolation with *ReplayInterpolation*
# True is the default CARLA behavior, this may cause replay timesteps in between ground truth data
# False ensures that every frame will match exactly with the recorded data at the exact timesteps (no interpolation)
ReplayInterpolation=False # see above

# for taking per-frame screen capture during replay (for post-hoc analysis)
RecordFrames=True      # additionally capture camera screenshots on replay tick (requires no replay interpolation!)
RecordAllShaders=False # Enable or disable rendering the scene with additional (beyond RGB) shaders such as depth
RecordAllPoses=False   # Enable or disable rendering the scene with all camera poses (beyond driver's seat)
FileFormatJPG=True     # either JPG or PNG
LinearGamma=True       # force linear gamme for frame capture render (recommended)
FrameWidth=1280        # resolution x for screenshot
FrameHeight=720        # resolution y for screenshot
FrameDir="FrameCap"    # directory name for screenshot
FrameName="tick"       # title of screenshot (differentiated via tick-suffix)

[CameraPose]
# starting pose should be one of: {DriversSeat, Front, BirdsEyeView, ThirdPerson}
StartingPose="DriversSeat" # starting position of camera in vehicle (on begin play)
# offsets from the EgoVehicle's bounding box positions if you need
Front=(X=1.1, Y=0.0, Z=0.3 | R=0.0, P=0.0, Y=0.0 | X=1.0, Y=1.0, Z=1.0)        # front "license plate" view
BirdsEyeView=(X=0.0, Y=0.0, Z=15 | R=0.0, P=270.0, Y=0.0 | X=1.0, Y=1.0, Z=1.0) # top down view
ThirdPerson=(X=-2, Y=0.0, Z=4 | R=0.0, P=330.0, Y=0.0 | X=1.0, Y=1.0, Z=1.0) # back angled view

[WheelFace]
# ABXY and Dpad buttons as custom-actors on the steering wheel face
EnableWheelButtons=True         # enable dpad & ABXY indicator buttons on wheel face or not
ABXYLocation=(X=-7, Y=-10, Z=4) # location relative to steering wheel where the center of ABXY is
DpadLocation=(X=-7, Y=10, Z=4)  # location relative to steering wheel where the center of Dpad is
QuadButtonSpread=2.0            # distance between the 4 buttons
# Autopilot status indicator (blue light)
EnableAutopilotIndicator=True          # enable blue light indicator for autopilot status
AutopilotIndicatorLoc=(X=-7, Y=0, Z=4) # location relative to steering wheel for center of indicator
AutopilotIndicatorSize=0.03            # size of the indicator

# for Logitech hardware of the racing sim
[Hardware]
DeviceIdx=0               # Device index of the hardware (Logitech has 2, can be 0 or 1)
LogUpdates=False          # whether or not to print debug messages
DeltaInputThreshold=0.02  # how much change the logi wheels need applied to overtake autopilot
ForceFeedbackMagnitude=30 # "Level of saturation" for the physical wheel actuation (0 to 100)

# VariableRateShading is an experimental attempt to squeeze more performance out of DReyeVR
# by reducing rendering quality of the scene in the periphery, which we should know from the real-time 
# gaze tracking. Unfortunately the development to port HTC Vive's VariableRateShading is still WIP and 
# currently only works in the Editor, not in a shipping/package game where it'd be most useful. We are
# actively working on this feature and will enable VRS once it is fully supported.
[VariableRateShading] # disabled by default (would need to enable via CarlaUE4.Build.cs flag)
Enabled=True          # currently only works in Editor mode (but enabled in Build.cs settings)
UsingEyeTracking=True # use eye tracking for foveated rendering if available
